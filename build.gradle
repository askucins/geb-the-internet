import groovy.json.JsonBuilder
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

/**
 * Properties (not mandatory):
 * qa.webdriver - webdriver name; one of: 'firefoxBare', 'firefox', 'firefoxHeadless', 'chromeBare', 'chrome', 'chromeHeadless'
 * qa.chromium - if present non-standard chromedriver version will be used (only POC)
 */


buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        // Gretty https://github.com/gretty-gradle-plugin/gretty
        classpath 'org.gretty:gretty:+'
    }
}

plugins {
    id 'idea'
    id 'groovy'
    id 'java-library'
    id 'com.github.erdi.webdriver-binaries' version '2.2'
    id 'com.github.erdi.idea-base' version '2.2'
    id 'org.asciidoctor.convert' version '2.4.0'
    id 'org.gretty' version '3.0.3'
}

/**
 * Wrapper
 */

wrapper {
    gradleVersion = '6.7.1'
    distributionType = Wrapper.DistributionType.ALL
}

/**
 * Geb and Webdriver configuration
 * Properties:
 *  qa.webdriver
 *  qa.chromium
 */

tasks.withType(Test) {
    systemProperty 'geb.env', project.findProperty('qa.webdriver')
    systemProperty 'geb.build.reportsDir', 'reports'
}

webdriverBinaries {
    driverUrlsConfiguration = resources.text.fromFile('webdriver.json')
    chromedriver {
        version = {
            (project.findProperty('qa.chromium') != null)
                ? '88.0.4324.27'
                : '87.0.4280.88'
        }()
        fallbackTo32Bit = true
    }
    geckodriver '0.26.0'
}

task refreshWebdriverConfiguration {
    group = 'other'
    description = 'refreshes configuration of webdriver binaries'

    def slurper = new JsonSlurper()
    def customWebdriver = slurper.parseText(resources.text.fromFile('webdriver-custom.json').asFile().text)
    try {
        def remoteWebdriver = slurper.parseText(new URL('https://raw.githubusercontent.com/webdriverextensions/webdriverextensions-maven-plugin-repository/master/repository-3.0.json').text)
        def finalWebdriver = slurper.parseText(new JsonBuilder([drivers: customWebdriver.drivers + remoteWebdriver.drivers]).toString())
        def webdriverJson = new File(projectDir, 'webdriver.json')
        webdriverJson.delete()
        webdriverJson << JsonOutput.prettyPrint(JsonOutput.toJson(finalWebdriver))
    } catch (e) {
        logger.error("Unable to refresh webdriver versions configuration!")
        logger.error(e.asString())
    }
}

task removeChromedriverInstances() {
    group = 'other'
    description = 'removes hanging instances of webdriver'

    def doRemoveWebdriverInstances = {
        exec {
            ignoreExitValue true
            commandLine "pgrep", "-f", "webdriver"
        }
        exec {
            ignoreExitValue true
            commandLine "pgrep", "-f", "chromedriver"
        }
        exec {
            ignoreExitValue true
            commandLine "pkill", "-f", "webdriver"
        }
        exec {
            ignoreExitValue true
            commandLine "pkill", "-f", "chromedriver"
        }
    }

    doLast {
        doRemoveWebdriverInstances()
    }
}

task cleanGebTestResults(type: Delete) {
    group = 'other'
    description = 'removes geb reports and logs'
    delete "reports"
    delete "logs"
}

/**
 * Integration tests with gretty
 */

sourceSets {
    integration {
        groovy.srcDir "$projectDir/src/integration/groovy"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

String localContextPath = '/gebbook'

task integrationTest(type: Test) {
    group = 'verification'
    description = 'runs integration tests via gretty'
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    systemProperty 'geb.build.baseUrl', "http://localhost:8080${localContextPath}/"
}

check.dependsOn integrationTest

gretty {
    contextPath = localContextPath
    integrationTestTask = 'integrationTest'
}

/**
 *  Usual configuration
 */

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.7'
    def spockVersion = '2.0-M4-groovy-3.0'
    testImplementation "org.spockframework:spock-core:${spockVersion}", {
        exclude module: 'groovy-all'
    }
    testImplementation "org.spockframework:spock-junit4:${spockVersion}" // TODO Temporary workaround for JUnit 4 rules
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    def gebVersion = '4.0-rc-1'
    implementation "org.gebish:geb-core:${gebVersion}"
    testImplementation "org.gebish:geb-spock:${gebVersion}"
    def webdriverVersion = '4.0.0-alpha-6' // '4.0.0-alpha-7'
    implementation 'io.netty:netty-buffer:4.1.56.Final' // TODO see below - workaround
    implementation("org.seleniumhq.selenium:selenium-support:${webdriverVersion}") {
        exclude group: 'io.netty'
    }
    implementation("org.seleniumhq.selenium:selenium-chrome-driver:${webdriverVersion}") {
        exclude group: 'io.netty'
    }
    implementation("org.seleniumhq.selenium:selenium-firefox-driver:${webdriverVersion}") {
        exclude group: 'io.netty'
    }

    // TODO It still throws an error...
    //testImplementation('com.athaydes:spock-reports:2.0-RC2') {
    //    transitive = false
    //}
    // TODO check https://github.com/AOEpeople/geb-spock-reports
    testImplementation 'com.aoe:geb-spock-reports:0.3.0-RC1'

    // Full-page screenshots https://github.com/pazone/ashot
    implementation 'ru.yandex.qatools.ashot:ashot:1.5.4'
    // TODO compare with the one used by Piotr:
    // implementation 'com.assertthat:selenium-shutterbug:1.2'

    // Proxy https://github.com/browserup/browserup-proxy
    def versionBrowserUp = '2.1.2'
    implementation "com.browserup:browserup-proxy:${versionBrowserUp}"
    implementation "com.browserup:browserup-proxy-core:${versionBrowserUp}"
    implementation "com.browserup:browserup-proxy-mitm:${versionBrowserUp}"
    // Proxy https://github.com/mrog/LittleProxy
    implementation 'xyz.rogfam:littleproxy:2.0.1'

    // Decompressing Brotli-encoded payload
    implementation 'org.brotli:dec:0.1.2'

    // OCR - Tesseract
    // Tesseract requires to install the library, e.g
    // [root@nighthawk tmp]# rpm -q tesseract
    // tesseract-3.04.00-3.el7.x86_64
    // TODO add verification of the installed binary
    implementation 'net.sourceforge.tess4j:tess4j:4.5.1'

    // Other
    testImplementation 'org.apache.commons:commons-text:1.9'
}

tasks.withType(Test) {
    systemProperty 'org.askucins.tesseract', '/usr/share/tesseract'

    testLogging {
        showStandardStreams = true
        events 'passed', 'failed'
        exceptionFormat 'full'

        debug {
            events 'passed', 'skipped', 'failed'
            showStackTraces true
            exceptionFormat 'full'
        }
    }
    useJUnitPlatform()
}

/**
 * Misc
 */

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

asciidoctor {
    sourceDir file('.')
    sources {
        include 'readme.adoc'
    }
    outputDir file('build/docs')
}