//TODO Fix these dummy workarounds for Intellij
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.apache.ivy:ivy:2.5.3'
        classpath 'org.apache.groovy:groovy-json:4.0.28'
        // Gretty https://github.com/gretty-gradle-plugin/gretty
        classpath 'org.gretty:gretty:+'
    }
}

plugins {
    id 'com.github.erdi.idea-base' version '2.2'
    id 'org.asciidoctor.jvm.convert' version '4.0.5'
    id 'org.gretty' version '4.1.7'
}

wrapper {
    gradleVersion = '8.14.3'
    distributionType = Wrapper.DistributionType.ALL
}

apply plugin: 'java'
apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'idea'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

asciidoctor {
    sourceDir file('.')
    sources {
        include 'readme.adoc'
    }
    outputDir file('build/docs')
}

/**
 * Geb and Webdriver mgmt
 * Properties:
 *  qa.webdriver
 */

tasks.withType(Test) {
    systemProperty 'geb.env', project.findProperty('qa.webdriver')
    systemProperty 'geb.build.reportsDir', 'reports'
}

tasks.register('removeWebdriverInstances') {
    group = 'other'
    description = 'removes hanging instances of webdriver'

    def doRemoveWebdriverInstances = {
        exec {
            ignoreExitValue true
            commandLine "pgrep", "-f", "webdriver"
        }
        exec {
            ignoreExitValue true
            commandLine "pgrep", "-f", "chromedriver"
        }
        exec {
            ignoreExitValue true
            commandLine "pgrep", "-f", "marionette"
        }
        exec {
            ignoreExitValue true
            commandLine "pkill", "-f", "webdriver"
        }
        exec {
            ignoreExitValue true
            commandLine "pkill", "-f", "chromedriver"
        }
        exec {
            ignoreExitValue true
            commandLine "pkill", "-f", "marionette"
        }
    }

    doLast {
        doRemoveWebdriverInstances()
    }
}

tasks.register('removeJettyInstances') {
    group = 'other'
    description = 'removes hanging instances of jetty'

    def doRemoveJettyInstances = {
        exec {
            ignoreExitValue true
            commandLine "pgrep", "-f", "jetty"
        }
        exec {
            ignoreExitValue true
            commandLine "pkill", "-f", "jetty"
        }
    }

    doLast {
        doRemoveJettyInstances()
    }
}

tasks.register('removeTestResults', Delete) {
    group = 'other'
    description = 'removes geb reports and logs'
    delete "reports"
    delete "logs"
}

/**
 * Integration tests with gretty
 */

sourceSets {
    integration {
        groovy.srcDir "$projectDir/src/integration/groovy"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}
// TODO https://discuss.gradle.org/t/gradle-7-fail-for-duplicates-in-copy-specs-has-no-duplicates-in-project/39834/7
tasks.named("processIntegrationResources") {
    duplicatesStrategy = 'include'
}


String localContextPath = '/gebbook'

tasks.register('integrationTest', Test) {
    group = 'verification'
    description = 'runs integration tests via gretty'
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    // According to https://gebish.org/manual/current/#base-url
    // Base url with trailing slash, relative urls without leading slash
    systemProperty 'geb.build.baseUrl', "http://localhost:8080${localContextPath}/"
}

gretty {
    contextPath = localContextPath
    integrationTestTask = 'integrationTest'
}

check.dependsOn integrationTest

/**
 *  Usual configuration
 */

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.groovy:groovy-all:4.0.28'
    implementation 'org.apache.groovy:groovy-json:4.0.28'
    implementation 'org.apache.groovy:groovy-yaml:4.0.28'
    implementation 'org.apache.groovy:groovy-xml:4.0.28'
    implementation 'org.apache.groovy:groovy-ginq:4.0.28'
    implementation 'org.slf4j:slf4j-api:2.0.17'
    implementation 'ch.qos.logback:logback-classic:1.5.18'
    def spockVersion = '2.4-M6-groovy-4.0'
    implementation "org.spockframework:spock-core:${spockVersion}", {
        exclude group: 'org.apache.groovy'
    }
    //Gotcha! https://github.com/spockframework/spock/issues/1849
    implementation 'org.junit.platform:junit-platform-testkit:1.13.4'
    def gebVersion = '7.0'
    implementation "org.gebish:geb-core:${gebVersion}"
    testImplementation "org.gebish:geb-spock:${gebVersion}"
    def webdriverVersion = '4.34.0'
    implementation 'io.netty:netty-buffer:4.1.117.Final' // TODO see below - workaround
    implementation("org.seleniumhq.selenium:selenium-support:${webdriverVersion}") {
        exclude group: 'io.netty'
    }
    implementation("org.seleniumhq.selenium:selenium-chrome-driver:${webdriverVersion}") {
        exclude group: 'io.netty'
    }
    implementation("org.seleniumhq.selenium:selenium-chromium-driver:${webdriverVersion}") {
        exclude group: 'io.netty'
    }
    implementation("org.seleniumhq.selenium:selenium-firefox-driver:${webdriverVersion}") {
        exclude group: 'io.netty'
    }
    implementation("org.seleniumhq.selenium:selenium-devtools-v138:${webdriverVersion}") {
        exclude group: 'io.netty'
    }

    testImplementation('com.athaydes:spock-reports:2.5.1-groovy-4.0') {
        transitive = false
    }

    // TODO check https://github.com/AOEpeople/geb-spock-reports
    testImplementation('com.aoe:geb-spock-reports:0.3.0-RC1') {
        exclude group: 'org.codehaus.groovy'
    }

    implementation('com.assertthat:selenium-shutterbug:1.6') {
        exclude group: 'org.seleniumhq.selenium'
        exclude group: 'org.codehaus.groovy'
    }

    def versionBrowserUp = '3.2.0'
    implementation "com.github.valfirst.browserup-proxy:browserup-proxy:${versionBrowserUp}"
    implementation "com.github.valfirst.browserup-proxy:browserup-proxy-core:${versionBrowserUp}"
    implementation "com.github.valfirst.browserup-proxy:browserup-proxy-mitm:${versionBrowserUp}"

    // Proxy https://github.com/LittleProxy/LittleProxy
    implementation 'io.github.littleproxy:littleproxy:2.4.5'

    // Decompressing Brotli-encoded payload
    implementation 'org.brotli:dec:0.1.2'

    // OCR - Tesseract
    // Tesseract requires to install the library, e.g
    // [root@nighthawk tmp]# rpm -q tesseract
    // tesseract-4.1.1-7.el9.x86_64
    // TODO add verification of the installed binary
    implementation 'net.sourceforge.tess4j:tess4j:5.8.0'

    // Other
    implementation 'org.apache.commons:commons-text:1.14.0'
    implementation 'commons-io:commons-io:2.20.0'
}

tasks.withType(GroovyCompile).configureEach {
    options.incremental = true
    options.incrementalAfterFailure = true
    doFirst {
        logger.lifecycle 'Explicitly enabling incremental compilation :{} in task: {}', options.incremental, it.name
    }
    //See: https://docs.gradle.org/current/dsl/org.gradle.api.tasks.compile.GroovyCompileOptions.html
    configure(groovyOptions.forkOptions) {
        memoryInitialSize = '512m'
        memoryMaximumSize = '6g'
        jvmArgs = ['-Xms512m', '-Xmx6g']
    }
}

//TODO read more about that 'configureEach' in https://docs.gradle.org/current/userguide/task_configuration_avoidance.html
tasks.withType(Test).configureEach {
    // See https://blog.gradle.org/stop-rerunning-tests
    systemProperty "random.testing.seed", new Random().nextInt()

    systemProperty 'org.askucins.tesseract', '/usr/share/tesseract'

    testLogging {
        showStandardStreams = true
        events 'passed', 'failed'
        exceptionFormat 'full'

        debug {
            events 'passed', 'skipped', 'failed'
            showStackTraces true
            exceptionFormat 'full'
        }
    }
    useJUnitPlatform()

    reports {
        String reportTimestamp = System.currentTimeMillis().toString()
        html.outputLocation = file("${reports.html.outputLocation.get()}-${reportTimestamp}")
        junitXml.outputLocation = file("${reports.junitXml.outputLocation.get()}-${reportTimestamp}")
        //Gotcha! This is the actual source for other reports!
        binaryResultsDirectory = file("${binaryResultsDirectory.get()}-${reportTimestamp}")
    }

    doFirst {
        logger.lifecycle "... configured test report (dir): {}", reports.html.outputLocation.get()
        logger.lifecycle "... configured test report (xml): {}", reports.junitXml.outputLocation.get()
        logger.lifecycle "... configured test report (bin): {}", binaryResultsDirectory.get()
    }
}
