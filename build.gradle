wrapper {
    gradleVersion = '6.1.1'
    distributionType = Wrapper.DistributionType.ALL
}

// Gretty https://github.com/gretty-gradle-plugin/gretty
buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath 'org.gretty:gretty:+'
    }
}

apply plugin: 'java-library'
apply plugin: 'groovy'
apply plugin: 'org.gretty'

repositories {
    jcenter()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:2.5.9'
    implementation 'org.slf4j:slf4j-api:2.0.0-alpha1'
    implementation 'ch.qos.logback:logback-classic:1.3.0-alpha5'
    def versionGeb = '3.2'
    implementation "org.gebish:geb-core:${versionGeb}"
    def versionWebdriver = "4.0.0-alpha-3"
    implementation "org.seleniumhq.selenium:selenium-chrome-driver:${versionWebdriver}"
    implementation "org.seleniumhq.selenium:selenium-firefox-driver:${versionWebdriver}"
    implementation "org.seleniumhq.selenium:selenium-support:${versionWebdriver}"

    testImplementation 'org.spockframework:spock-core:1.3-groovy-2.5', {
        exclude module: 'groovy-all'
    }
    testImplementation "org.gebish:geb-spock:${versionGeb}"
    testImplementation('com.athaydes:spock-reports:1.6.2') {
        transitive = false // this avoids affecting your version of Groovy/Spock
    }

    // Proxy https://github.com/browserup/browserup-proxy
    def versionBrowserUp = '2.0.1'
    testImplementation "com.browserup:browserup-proxy-core:${versionBrowserUp}"
    testImplementation "com.browserup:browserup-proxy-mitm:${versionBrowserUp}"
    // Proxy https://github.com/mrog/LittleProxy
    testImplementation 'xyz.rogfam:littleproxy:2.0.0-beta-5'

    // OCR - Tesseract
    // Tesseract requires to install the library, e.g
    // [root@nighthawk tmp]# rpm -q tesseract
    // tesseract-3.04.00-3.el7.x86_64
    testImplementation 'net.sourceforge.tess4j:tess4j:4.4.1'
}

sourceSets {
    integration {
        groovy.srcDir "$projectDir/src/integration/groovy"
        resources.srcDir "$projectDir/src/integration/resources"
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationImplementation.extendsFrom testImplementation
    integrationRuntime.extendsFrom testRuntime
}

tasks.withType(Test) {
    systemProperty 'webdriver.chrome.driver', '/opt/webdriver/chromedriver'
    systemProperty 'webdriver.gecko.driver', '/opt/webdriver/geckodriver'
    systemProperty 'geb.build.reportsDir', 'reports'
    systemProperty 'geb.build.baseUrl', 'http://the-internet.herokuapp.com/'
    systemProperty 'org.askucins.tesseract', '/usr/share/tesseract'
    systemProperty 'org.askucins.webdriver', project.findProperty('webdriver')

    testLogging {
        events 'passed', 'failed'
        exceptionFormat 'full'

        debug {
            events 'passed', 'skipped', 'failed'
            showStackTraces true
            exceptionFormat 'full'
        }
    }
}

String localContextPath = '/gebbook'

task integrationTest(type: Test) {
    group = 'verification'
    description = 'runs integration tests via gretty'
    testClassesDirs = sourceSets.integration.output.classesDirs
    classpath = sourceSets.integration.runtimeClasspath

    systemProperty 'geb.build.baseUrl', "http://localhost:8080${localContextPath}/"
}

check.dependsOn integrationTest

gretty {
    contextPath = localContextPath
    integrationTestTask = 'integrationTest'
}